import java.rmi.Naming;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;
import java.util.Scanner;
import java.util.Stack;
import java.util.StringTokenizer;

import javax.naming.Context;
import javax.naming.InitialContext;




public class MojaUslugaImpl extends UnicastRemoteObject implements MojaUsluga
{

	public MojaUslugaImpl() throws RemoteException {}

	public String ZamienNaONP(String wyraz) throws RemoteException {
		
		String wyrazenie = wyraz;
		String onp = "";
		String nieLiczby="+-*/^()";
		
		Stack<String> stos = new Stack<String>();
		StringTokenizer st = new StringTokenizer(wyrazenie, "+-*/^()", true);
		while(st.hasMoreTokens())
			{
				String s = st.nextToken();
				if( s.equals("+") || s.equals("*") || s.equals("-") || s.equals("/") || s.equals("^"))
				{
					while(!stos.empty() && priorytet(stos.peek()) >= priorytet(s))
					{
						onp += stos.pop() + " ";
					}
					stos.push(s);
				}
				else if(s.equals("("))
				{
					stos.push(s);
				}
				else if(s.equals(")"))
				{
					while(!stos.peek().equals("("))
					{
						onp += stos.pop() + " ";
					}
					stos.pop();
				}	
				else { onp += s + " "; }
			}

		while(!stos.empty())
		{
			onp += stos.pop() + " ";
		}

		return onp;
		
	}
	

	public int priorytet(String operator)
	{
		if(operator.equals("+") || operator.equals("-")) {return 1;}
		else if(operator.equals("*") || operator.equals("/")) {return 2;}
		else if(operator.equals("^")){return 3;}
		else {return 0;}
	}

		
	public double ObliczONP(String b) throws RemoteException {
		return 0;
	}
	
	

	public static void main(String[] args) {
		try {
			MojaUsluga usluga = new MojaUslugaImpl();
			Registry reg = LocateRegistry.createRegistry(1099);
			reg.bind("NotacjaONP", usluga);
 
			Context context = new InitialContext();
			context.bind("NotacjaONP", usluga);
			System.out.println("OK...");
			
		} catch (Exception ex) {
			ex.printStackTrace();
		}

	}
	

}
